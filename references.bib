@book{Kiczales1991,
 author="Kiczales, Gregor and Rivieres, Jim Des",
 title="The Art of the Metaobject Protocol",
 year="1991",
 isbn="0262111586",
 publisher="MIT Press",
 address="Cambridge, MA, USA",
 annotate="Background material: Introduces metaobject protocols as an approach to language design."
}

@inproceedings{Marr2009,
  author="Marr, Stefan and Haupt, Michael and D'Hondt, Theo",
  title="Intermediate Language Design of High-level Language Virtual Machines: Towards Comprehensive Concurrency Support",
  booktitle="Proceedings of the Third Workshop on Virtual Machines and Intermediate Languages",
  series="VMIL '09",
  year="2009",
  isbn="978-1-60558-874-2",
  location="Orlando, Florida",
  pages="3:1--3:2",
  articleno="3",
  numpages="2",
  url="http://doi.acm.org/10.1145/1711506.1711509",
  doi="10.1145/1711506.1711509",
  acmid="1711509",
  publisher="ACM",
  address="New York, NY, USA",
  keywords="bytecode, concurrency, design, instruction set, intermediate language, survey, virtual machines",
  annotate="Short but helpful: Investigates concurrency support in common virtual machines (CLI, Dis VM, Erlang, JVM, Mozart/Oz) and finds it limited. Seems to serve primarily as a guide for Marr's later research."
}

@incollection{Morandi2010,
  author="Morandi, Benjamin and Bauer, Sebastian S. and Meyer, Bertrand",
  title="SCOOP -- a Contract-based Concurrent Object-oriented Programming Model",
  bookTitle="Advanced Lectures on Software Engineering",
  editor="M{\"u}ller, Peter",
  year="2010",
  isbn="3-642-13009-7, 978-3-642-13009-0",
  pages="41--90",
  numpages="50",
  url="http://dl.acm.org/citation.cfm?id=2167938.2167941",
  acmid="2167941",
  publisher="Springer-Verlag",
  address="Berlin, Heidelberg",
  annotate="Need to find full copy: Discusses generalization of object-oriented concepts for use in concurrent contexts."
}

@incollection{Marr2012,
  author="Marr, Stefan and D'Hondt, Theo",
  title="Identifying a Unifying Mechanism for the Implementation of Concurrency Abstractions on Multi-language Virtual Machines",
  bookTitle="Objects, Models, Components, Patterns: 50th International Conference, TOOLS 2012, Prague, Czech Republic, May 29-31, 2012. Proceedings",
  editor="Furia, Carlo A. and Nanz, Sebastian",
  year="2012",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="171--186",
  isbn="978-3-642-30561-0",
  doi="10.1007/978-3-642-30561-0_13",
  url="http://dx.doi.org/10.1007/978-3-642-30561-0_13",
  annotate="Useful and peer reviewed: Advocates for domain-specific concurrenct abstractions rather than looking for some ``silver bullet,'' but seeks to find some commonalities that would allow virtual machines to provide some intrinsic support. Conducts a thorough survey of parallel/concurrent constructs and finds that concurrency constructs (moreso than parallel constructs) benefit from VM support. Suggests a meta-object protocol that can support a variety of abstractions."
}

@inproceedings{Marr2015,
 author="Marr, Stefan and Seaton, Chris and Ducasse, St{\'e}phane",
 title="Zero-overhead Metaprogramming: Reflection and Metaobject Protocols Fast and Without Compromises",
 booktitle="Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation",
 series="PLDI '15",
 year="2015",
 isbn="978-1-4503-3468-6",
 location="Portland, OR, USA",
 pages="545--554",
 numpages="10",
 url="http://doi.acm.org/10.1145/2737924.2737963",
 doi="10.1145/2737924.2737963",
 acmid="2737963",
 publisher="ACM",
 address="New York, NY, USA",
 keywords="Just-in-Time Compilation, Meta-tracing, Metaobject Protocols, Metaprogramming, Partial Evaluation, Proxies, Reflection, Virtual Machines",
 annotate="Heavier explanation of metaprogramming concepts, peer reviewed: Primarily demonstrates that it's possible to remove runtime overhead from metaprogramming. Helpfully explains metaobject protocols (facilities to change a language's behavior) and metaprogramming as of 2015 (reflection, performance considerations, self-optimizing interpreters). Presents dispatch chains as a solution to metaprogramming overhead and demonstrates improvements in actual languages. Provides a substantial amount of related work."
}
